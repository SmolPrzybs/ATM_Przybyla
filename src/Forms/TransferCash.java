package Forms;

import Entities.User;
import Services.AccountService;
import Services.UserService;
import javax.swing.JOptionPane;

/**
 * @author mprzybyla
 */
public class TransferCash extends javax.swing.JDialog {

    /**
     * Creates new form TransferCashDialog
     */
    public TransferCash(java.awt.Frame parent, boolean modal, User _fromUser) {
        super(parent, modal);
        initComponents();
        this.fromUser=_fromUser;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FirstNameLabel = new javax.swing.JLabel();
        FirstNameInput = new javax.swing.JTextField();
        LastNameLabel = new javax.swing.JLabel();
        LastNameInput = new javax.swing.JTextField();
        TransferAmountLabel = new javax.swing.JLabel();
        TransferAmountInput = new javax.swing.JSpinner();
        ConfirmButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        FirstNameLabel.setText("Imię odbiorcy:");

        LastNameLabel.setText("Nazwisko odbiorcy:");

        TransferAmountLabel.setText("Kwota przelewu:");

        ConfirmButton.setText("Wykonaj przelew");
        ConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TransferAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TransferAmountInput, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FirstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(ConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TransferAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TransferAmountInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(ConfirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmButtonActionPerformed
        // TODO add your handling code here:
        //check if user exist
        String receiverFirstName = FirstNameInput.getText();
        String receiverLastName = LastNameInput.getText();
        this.toUser = UserService.getUserByFirstAndLastName(receiverFirstName, receiverLastName);
        if(this.toUser.FirstName==null || this.toUser.LastName==null)
        {
            JOptionPane.showMessageDialog(this, "Wybrany użytkownik nie istnieje!");
            this.dispose();
        }
        if(this.fromUser.Id == this.toUser.Id)
        {
            JOptionPane.showMessageDialog(this, "Nie można wykonać przelewu do samego siebie!");
            this.dispose();
        }
        else if(this.toUser!=null)
        {
            //check sender account balance
            int amount = AccountService.GetAccountBalance(this.fromUser.Id);
            
            if(amount<(int)this.TransferAmountInput.getValue())
            {
                JOptionPane.showMessageDialog(this, "Niewystarczająca ilość środków aby wykonać tą operację");
                this.dispose();
            }
            else
            {
                boolean transfered = false;
                transfered = AccountService.TransferCash(this.fromUser, this.toUser, (int)this.TransferAmountInput.getValue());
                
                if(transfered)
                {
                    JOptionPane.showMessageDialog(this, "Środki zostały przelane.");
                    this.dispose();
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Wystąpił nieoczekiwany błąd. Prosimy spróbować później.");
                    this.dispose();
                }
            }
        }
        
        
        //perform transfer
    }//GEN-LAST:event_ConfirmButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JTextField FirstNameInput;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JTextField LastNameInput;
    private javax.swing.JLabel LastNameLabel;
    private javax.swing.JSpinner TransferAmountInput;
    private javax.swing.JLabel TransferAmountLabel;
    // End of variables declaration//GEN-END:variables

    private User fromUser = null;
    private User toUser = null;

    /**
     * Get the value of toUser
     *
     * @return the value of toUser
     */
    public User getToUser() {
        return toUser;
    }

    /**
     * Set the value of toUser
     *
     * @param toUser new value of toUser
     */
    public void setToUser(User toUser) {
        this.toUser = toUser;
    }


    /**
     * Get the value of fromUser
     *
     * @return the value of fromUser
     */
    public User getFromUser() {
        return fromUser;
    }

    /**
     * Set the value of fromUser
     *
     * @param fromUser new value of fromUser
     */
    public void setFromUser(User fromUser) {
        this.fromUser = fromUser;
    }
}
